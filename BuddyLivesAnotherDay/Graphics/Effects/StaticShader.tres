[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.05 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "noiseScale"

[sub_resource type="VisualShaderNodeVectorCompose" id=5]

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeTexture" id=7]
output_port_for_preview = 1
source = 5

[sub_resource type="VisualShaderNodeInput" id=8]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=9]

[sub_resource type="VisualShaderNodeExpression" id=10]
output_port_for_preview = 0
size = Vector2( 734, 396 )
expression = "output=fract(sin(dot(input.xy * time,vec2(12.9898,78.233)))*43758.5453123);"

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "time"

[sub_resource type="VisualShader" id=12]
code = "shader_type canvas_item;
render_mode blend_add;

uniform float noiseScale;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(SCREEN_UV, 0.0);

// Input:9
	float n_out9p0 = TIME;

// Expression:6
	float n_out6p0;
	n_out6p0 = 0.0;
	{
		n_out6p0=fract(sin(dot(n_out4p0.xy * n_out9p0,vec2(12.9898,78.233)))*43758.5453123);
	}

// ScalarUniform:14
	float n_out14p0 = noiseScale;

// ScalarOp:10
	float n_out10p0 = n_out6p0 * n_out14p0;

// ScalarOp:13
	float n_in13p1 = 2.00000;
	float n_out13p0 = n_out14p0 / n_in13p1;

// ScalarOp:11
	float n_out11p0 = n_out10p0 - n_out13p0;

// VectorCompose:15
	vec3 n_out15p0 = vec3(n_out11p0, n_out11p0, n_out11p0);

// Scalar:5
	float n_out5p0 = 0.000000;

// Input:2

// Texture:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = textureLod(SCREEN_TEXTURE, n_out4p0.xy, n_out5p0);
		n_out3p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out3p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out15p0;
	COLOR.a = n_out3p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 438.4, -5.06084 )
mode = 1
modes/blend = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1560, 380 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( 100, 540 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( 1040, 400 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( -140, 340 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( 100, 460 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( 140, 0 )
nodes/fragment/6/size = Vector2( 734, 396 )
nodes/fragment/6/input_ports = "0,1,input;1,0,time;"
nodes/fragment/6/output_ports = "0,0,output;"
nodes/fragment/6/expression = "output=fract(sin(dot(input.xy * time,vec2(12.9898,78.233)))*43758.5453123);"
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -220, 100 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 1060, 40 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 1320, 120 )
nodes/fragment/13/node = SubResource( 3 )
nodes/fragment/13/position = Vector2( 1040, 280 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( -100, 180 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( 1580, 160 )
nodes/fragment/connections = PoolIntArray( 9, 0, 6, 1, 4, 0, 6, 0, 10, 0, 11, 0, 13, 0, 11, 1, 14, 0, 13, 0, 14, 0, 10, 1, 6, 0, 10, 0, 5, 0, 3, 1, 4, 0, 3, 0, 3, 1, 0, 1, 2, 0, 3, 2, 11, 0, 15, 0, 11, 0, 15, 1, 11, 0, 15, 2, 15, 0, 0, 0 )

[resource]
render_priority = 1
shader = SubResource( 12 )
shader_param/noiseScale = 0.2
